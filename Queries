/*
1. No. of new accounts, average loan amount in different products opened in <user provided> period
Input: Start Data & End Date
Output: Product, No_Of_Accounts, Avg_Loan_Amount

*/
SELECT  DATA.PRODUCT_GROUP,
        DATA.OLD_ACCOUNTS,
        ROUND(DATA.OLD_LOAN_AMOUNT / DATA.OLD_ACCOUNTS) OLD_AVG_LOAN_AMT,
        DATA.NEW_ACCOUNTS,
        ROUND(DATA.NEW_LOAN_AMOUNT / DATA.NEW_ACCOUNTS) NEW_AVG_LOAN_AMT,
        ROUND(((ROUND(DATA.NEW_LOAN_AMOUNT / DATA.NEW_ACCOUNTS) - ROUND(DATA.OLD_LOAN_AMOUNT / DATA.OLD_ACCOUNTS)) / ROUND(DATA.OLD_LOAN_AMOUNT / DATA.OLD_ACCOUNTS)) * 100) VARIATION
FROM
 
(SELECT PRODUCT_MASTER.PRODUCT_GROUP, 
        SUM(CASE WHEN ACCOUNT.LOAN_DISBURSED_DATE < '1-APR-2017' THEN 1 ELSE 0 END) OLD_ACCOUNTS,
        SUM(CASE WHEN ACCOUNT.LOAN_DISBURSED_DATE >= '1-APR-2017' THEN 1 ELSE 0 END) NEW_ACCOUNTS,
        SUM(CASE WHEN ACCOUNT.LOAN_DISBURSED_DATE < '1-APR-2017' THEN ACCOUNT.LOAN_AMOUNT ELSE 0 END) OLD_LOAN_AMOUNT,
        SUM(CASE WHEN ACCOUNT.LOAN_DISBURSED_DATE >= '1-APR-2017' THEN ACCOUNT.LOAN_AMOUNT ELSE 0 END) NEW_LOAN_AMOUNT
   FROM
	   (SELECT PRODUCT.PRODUCT_NO, PRODUCT.SUB_PRODUCT_NO, PRODUCT.PRODUCT_GROUP FROM PRODUCT) PRODUCT_MASTER
		LEFT OUTER JOIN
		ACCOUNT
		ON (ACCOUNT.PRODUCT_NO = PRODUCT_MASTER.PRODUCT_NO
		AND ACCOUNT.SUB_PRODUCT_NO = PRODUCT_MASTER.SUB_PRODUCT_NO)	
  WHERE ACCOUNT.LOAN_DISBURSED_DATE <= '20-APR-2017'
  GROUP BY PRODUCT_MASTER.PRODUCT_GROUP) DATA
  
ORDER BY DATA.PRODUCT_GROUP;

---------------------------------------------------------------------------------------------------------
/*
2. Expected vs Actual collection for different Branches in <user provided> period
Input: Start Data & End Date
Output: Branch, City, State, Expected Collection, Actual Collection, Deficit%
*/

SELECT  MASTER_BRANCH.BRANCH_NO || '-' || 
        MASTER_BRANCH.NAME || '-' || 
        MASTER_BRANCH.CITY BRANCH_NAME,
        ROUND(NVL(ACTUAL.ACTUAL_COLLECTION/1000, 0)) ACTUAL_COLLECTION,
        ROUND(NVL(EXPECTED.EXPECTED_COLLECTION/1000, 0)) EXPECTED_COLLECTION,
        ROUND(CASE WHEN NVL(ACTUAL.ACTUAL_COLLECTION, 0) > NVL(EXPECTED.EXPECTED_COLLECTION, 0) 
					THEN 0
				   ELSE (NVL(EXPECTED.EXPECTED_COLLECTION, 0) - NVL(ACTUAL.ACTUAL_COLLECTION, 0)) 
						/ NVL(EXPECTED.EXPECTED_COLLECTION, 0) * 100 END, 2) DEFICIT

  FROM  BRANCH MASTER_BRANCH,

		(SELECT B.BRANCH_NO, 
				SUM(T.CREDIT_AMOUNT) ACTUAL_COLLECTION
		   FROM TRANSACTION T,
				ACCOUNT A, 
				BRANCH B
		  WHERE T.ACCOUNT_NO = A.ACCOUNT_NO
			AND A.BRANCH_NO = B.BRANCH_NO
			AND T.TRANSACTION_DATE BETWEEN '1-APR-2017' AND '20-APR-2017'
			AND A.STATUS NOT IN ('Terminated', 'Cancelled')
	   GROUP BY B.BRANCH_NO) ACTUAL,

		(SELECT B.BRANCH_NO, 
				SUM(R.REPAY_AMOUNT) EXPECTED_COLLECTION
		   FROM REPAYMENT_SCHEDULE R,
				ACCOUNT A, 
				BRANCH B
		  WHERE R.ACCOUNT_NO = A.ACCOUNT_NO
			AND A.BRANCH_NO = B.BRANCH_NO
			AND R.REPAY_DATE BETWEEN '1-APR-2017' AND '20-APR-2017'
			AND A.STATUS NOT IN ('Terminated', 'Cancelled')
	   GROUP BY B.BRANCH_NO) EXPECTED

WHERE MASTER_BRANCH.BRANCH_NO = ACTUAL.BRANCH_NO(+)
  AND MASTER_BRANCH.BRANCH_NO = EXPECTED.BRANCH_NO(+)
ORDER BY MASTER_BRANCH.BRANCH_NO;

---------------------------------------------------------------------------------------------------------
/*
3. Expected vs Actual collection for different States in <user provided> period
Input: Start Data & End Date
Output: State, Deficit%
US Map
*/

SELECT G.STATE,
       ROUND(G.ACTUAL_COLLECTION) ACTUAL_COLLECTION,
       ROUND(G.EXPECTED_COLLECTION) EXPECTED_COLLECTION,
       ROUND(CASE WHEN G.ACTUAL_COLLECTION > G.EXPECTED_COLLECTION
					THEN 0
				  ELSE (G.EXPECTED_COLLECTION - G.ACTUAL_COLLECTION)
						/ G.EXPECTED_COLLECTION * 100 END, 2) DEFICIT
						
FROM	(SELECT MASTER_BRANCH.STATE STATE,
				SUM(NVL(ACTUAL.ACTUAL_COLLECTION/1000,0)) ACTUAL_COLLECTION,
				SUM(NVL(EXPECTED.EXPECTED_COLLECTION/1000,0)) EXPECTED_COLLECTION
		  
		  FROM  BRANCH MASTER_BRANCH,

				(SELECT B.BRANCH_NO, 
						SUM(T.CREDIT_AMOUNT) ACTUAL_COLLECTION
				   FROM TRANSACTION T,
						ACCOUNT A, 
						BRANCH B
				  WHERE T.ACCOUNT_NO = A.ACCOUNT_NO
					AND A.BRANCH_NO = B.BRANCH_NO
					AND T.TRANSACTION_DATE BETWEEN '1-APR-2017' AND '20-APR-2017'
					AND A.STATUS NOT IN ('Terminated', 'Cancelled')
			   GROUP BY B.BRANCH_NO) ACTUAL,

				(SELECT B.BRANCH_NO, 
						SUM(R.REPAY_AMOUNT) EXPECTED_COLLECTION
				   FROM REPAYMENT_SCHEDULE R,
						ACCOUNT A, 
						BRANCH B
				  WHERE R.ACCOUNT_NO = A.ACCOUNT_NO
					AND A.BRANCH_NO = B.BRANCH_NO
					AND R.REPAY_DATE BETWEEN '1-APR-2017' AND '20-APR-2017'
					AND A.STATUS NOT IN ('Terminated', 'Cancelled')
			   GROUP BY B.BRANCH_NO) EXPECTED

		WHERE MASTER_BRANCH.BRANCH_NO = ACTUAL.BRANCH_NO(+)
		  AND MASTER_BRANCH.BRANCH_NO = EXPECTED.BRANCH_NO(+)
	 GROUP BY MASTER_BRANCH.STATE) G
	 
ORDER BY G.STATE;

---------------------------------------------------------------------------------------------------------

/*
4. Productwise Best and Worst State
Input: Start Date and End Date
Output: State, Best State, Best State Revenue, Worst State, Worst State Revenue
*/

SELECT HIGH.PRODUCT_GROUP,
       HIGH.STATE HIGHEST,
       ROUND(HIGH.REVENUE/1000) HIGHEST_REVENUE,
       LOW.STATE LOWEST,
       ROUND(LOW.REVENUE/1000) LOWEST_REVENUE

  FROM(SELECT PRODUCT_GROUP,
			  RANK,
			  STATE,
			  REVENUE
	     
		 FROM (SELECT 	PRODUCT_GROUP,
						RANK() OVER (PARTITION BY PRODUCT_GROUP ORDER BY REVENUE DESC) RANK,
						STATE,
						REVENUE
				 FROM	(SELECT P.PRODUCT_GROUP,
								B.STATE,
								(SUM(T.CREDIT_AMOUNT) - SUM(T.DEBIT_AMOUNT)) REVENUE
						   
						   FROM TRANSACTION T,
								ACCOUNT A,
								BRANCH B,
								PRODUCT P
						  WHERE T.TRANSACTION_DATE BETWEEN '1-MAR-2017' AND '31-MAR-2017'
							AND T.ACCOUNT_NO = A.ACCOUNT_NO
				  		    AND B.BRANCH_NO = T.BRANCH_NO
						    AND A.PRODUCT_NO = P.PRODUCT_NO
						    AND A.SUB_PRODUCT_NO = P.SUB_PRODUCT_NO
					   GROUP BY P.PRODUCT_GROUP,
								B.STATE))
	   WHERE RANK = 1
	   ORDER BY PRODUCT_GROUP, RANK) HIGH,

	  (SELECT PRODUCT_GROUP,
			  RANK,
			  STATE,
			  REVENUE
	   
	     FROM (SELECT 	PRODUCT_GROUP,
						RANK() OVER (PARTITION BY PRODUCT_GROUP ORDER BY REVENUE) RANK,
						STATE,
						REVENUE
			
				 FROM (SELECT 	P.PRODUCT_GROUP,
								B.STATE,
								(SUM(T.CREDIT_AMOUNT) - SUM(T.DEBIT_AMOUNT)) REVENUE
								
						 FROM TRANSACTION T,
							  ACCOUNT A,
							  BRANCH B,
							  PRODUCT P
						WHERE T.TRANSACTION_DATE BETWEEN '1-MAR-2017' AND '31-MAR-2017'
						  AND T.ACCOUNT_NO = A.ACCOUNT_NO
						  AND B.BRANCH_NO = T.BRANCH_NO
						  AND A.PRODUCT_NO = P.PRODUCT_NO
						  AND A.SUB_PRODUCT_NO = P.SUB_PRODUCT_NO
					 GROUP BY P.PRODUCT_GROUP, B.STATE))
	   WHERE RANK = 1
	   ORDER BY PRODUCT_GROUP, RANK) LOW
	   
WHERE HIGH.PRODUCT_GROUP = LOW.PRODUCT_GROUP;

---------------------------------------------------------------------------------------------------------
/*
5. Customer Age Distribution
Input: Start Date and End Date
Output: Product, Age Group, Total Customers, New Customers, %Change
*/

SELECT MASTER.PRODUCT_GROUP,
       MASTER.SLAB,
       NVL(D.CT,0) NO_OF_CUSTOMERS 
FROM
  (SELECT PRODUCT_MASTER.PRODUCT_GROUP,
          AGE_MASTER.SLAB
   FROM
     (SELECT DISTINCT PRODUCT_GROUP
      FROM PRODUCT) PRODUCT_MASTER,

     (SELECT '20 Under' SLAB
      FROM DUAL
      UNION ALL SELECT '21-30' SLAB
      FROM DUAL
      UNION ALL SELECT '31-40' SLAB
      FROM DUAL
      UNION ALL SELECT '41-50' SLAB
      FROM DUAL
      UNION ALL SELECT '50 Above' SLAB
      FROM DUAL) AGE_MASTER) MASTER,

  (SELECT P.PRODUCT_GROUP,
          C.CUSTOMER_PROFILE,
          COUNT(1) CT
   FROM PRODUCT P,
        ACCOUNT A,

     (SELECT C.CUSTOMER_NO,
             CASE
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) < 20 THEN '20 Under'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) BETWEEN 21 AND 30 THEN '21-30'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) BETWEEN 31 AND 40 THEN '31-40'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) BETWEEN 41 AND 50 THEN '41-50'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) > 50 THEN '50 Above'
             END CUSTOMER_PROFILE
      FROM CUSTOMER C) C
   WHERE A.PRODUCT_NO = P.PRODUCT_NO
     AND A.SUB_PRODUCT_NO = P.SUB_PRODUCT_NO
     AND A.CUSTOMER_NO = C.CUSTOMER_NO
   GROUP BY P.PRODUCT_GROUP,
            C.CUSTOMER_PROFILE) D
WHERE D.PRODUCT_GROUP(+) = MASTER.PRODUCT_GROUP
  AND D.CUSTOMER_PROFILE(+) = MASTER.SLAB
ORDER BY MASTER.PRODUCT_GROUP,
         MASTER.SLAB;

---------------------------------------------------------------------------------------------------------

/*
6. Daily Expected Collection Variation Report
Input: Start Date & End Date / Month
Output: Date, Coll, Prev Day Coll, Variation%
*/

SELECT NEXT.REPAY_DATE,
       NEXT.TOT_AMT COLLECTIONS,
       NVL(PREV.TOT_AMT, 0) PREV_DAY_COLLECTIONS,
       CASE
           WHEN PREV.TOT_AMT IS NULL THEN 0
           ELSE ROUND(((NEXT.TOT_AMT - PREV.TOT_AMT) / PREV.TOT_AMT) * 100, 2)
       END CHANGE,
           NEXT.INT_AMT INTEREST_COLLECTIONS,
           NVL(PREV.INT_AMT, 0) PREV_DAY_INTEREST_COLLECTIONS,
           CASE
               WHEN PREV.INT_AMT IS NULL THEN 0
               ELSE ROUND(((NEXT.INT_AMT - PREV.INT_AMT) / PREV.INT_AMT) * 100, 2)
           END CHANGE
FROM
  (SELECT R.REPAY_DATE,
          SUM(R.REPAY_AMOUNT) TOT_AMT,
          SUM(R.INTEREST_PART) INT_AMT,
          SUM(R.PRINCIPAL_PART) PRIN_AMT
   FROM REPAYMENT_SCHEDULE R
   WHERE R.REPAY_DATE BETWEEN '28-FEB-2017' AND '31-MAR-2017'
   GROUP BY R.REPAY_DATE) PREV
RIGHT OUTER JOIN
  (SELECT R.REPAY_DATE,
          SUM(R.REPAY_AMOUNT) TOT_AMT,
          SUM(R.INTEREST_PART) INT_AMT,
          SUM(R.PRINCIPAL_PART) PRIN_AMT
   FROM REPAYMENT_SCHEDULE R
   WHERE R.REPAY_DATE BETWEEN '1-MAR-2017' AND '31-MAR-2017'
   GROUP BY R.REPAY_DATE) NEXT ON (PREV.REPAY_DATE + 1 = NEXT.REPAY_DATE)
ORDER BY NEXT.REPAY_DATE;

---------------------------------------------------------------------------------------------------------

/*
7. Actual Collection Distribution
Input: Start Date & End Date / Month
Output: Date, Actual Collection, Variation%
*/

SELECT NEXT.TRANSACTION_DATE,
       NEXT.TOT_AMT COLLECTIONS,
       NVL(PREV.TOT_AMT, 0) PREV_DAY_COLLECTIONS,
       CASE
           WHEN PREV.TOT_AMT IS NULL THEN 0
           ELSE ROUND(((NEXT.TOT_AMT - PREV.TOT_AMT) / PREV.TOT_AMT) * 100, 2)
       END CHANGE
FROM
  (SELECT T.TRANSACTION_DATE,
          SUM(T.CREDIT_AMOUNT) TOT_AMT
   FROM TRANSACTION T
   WHERE T.TRANSACTION_DATE BETWEEN '28-FEB-2017' AND '31-MAR-2017'
   GROUP BY T.TRANSACTION_DATE) PREV
RIGHT OUTER JOIN
  (SELECT T.TRANSACTION_DATE,
          SUM(T.CREDIT_AMOUNT) TOT_AMT
   FROM TRANSACTION T
   WHERE T.TRANSACTION_DATE BETWEEN '1-MAR-2017' AND '31-MAR-2017'
   GROUP BY T.TRANSACTION_DATE) NEXT ON (PREV.TRANSACTION_DATE + 1 = NEXT.TRANSACTION_DATE)
ORDER BY NEXT.TRANSACTION_DATE;

---------------------------------------------------------------------------------------------------------
/*
8. Second Loan Preference
Output: First Loan, Second Loan, No of customers, Probability
*/

WITH RETURNING AS
  (SELECT C.CUSTOMER_NO,
          A.ACCOUNT_NO,
          A.LOAN_DISBURSED_DATE,
          P.PRODUCT_GROUP,
          RANK() OVER (PARTITION BY C.CUSTOMER_NO
                       ORDER BY A.LOAN_DISBURSED_DATE) SEQ
   FROM ACCOUNT A,
        CUSTOMER C,

     (SELECT C.CUSTOMER_NO
      FROM ACCOUNT A,
           CUSTOMER C
      WHERE A.CUSTOMER_NO = C.CUSTOMER_NO
      GROUP BY C.CUSTOMER_NO
      HAVING COUNT(DISTINCT A.ACCOUNT_NO) > 1) R,
        PRODUCT P
   WHERE A.CUSTOMER_NO = C.CUSTOMER_NO
     AND C.CUSTOMER_NO = R.CUSTOMER_NO
     AND A.PRODUCT_NO = P.PRODUCT_NO
     AND A.SUB_PRODUCT_NO = P.SUB_PRODUCT_NO), PG AS
  (SELECT DISTINCT PRODUCT_GROUP
   FROM PRODUCT)
SELECT MASTER.FIRST_PROD,
       MASTER.SEC_PROD,
       NVL(DATA.CASES,0) NO_OF_CASES
FROM
  (SELECT P1.PRODUCT_GROUP FIRST_PROD,
          P2.PRODUCT_GROUP SEC_PROD
   FROM PG P1,
        PG P2
   WHERE P1.PRODUCT_GROUP <> P2.PRODUCT_GROUP) MASTER,
  (SELECT FIRST_PROD,
          SEC_PROD,
          COUNT(1) CASES
   FROM
     (SELECT R1.PRODUCT_GROUP FIRST_PROD,
             R2.PRODUCT_GROUP SEC_PROD
      FROM
        (SELECT *
         FROM RETURNING
         WHERE SEQ = 1) R1,

        (SELECT *
         FROM RETURNING
         WHERE SEQ = 2) R2
      WHERE R1.CUSTOMER_NO = R2.CUSTOMER_NO)
   GROUP BY FIRST_PROD,
            SEC_PROD) DATA
WHERE MASTER.FIRST_PROD = DATA.FIRST_PROD(+)
  AND MASTER.SEC_PROD = DATA.SEC_PROD(+)
ORDER BY MASTER.FIRST_PROD, MASTER.SEC_PROD;
  
---------------------------------------------------------------------------------------------------------

/*
9. Average Income, Obligations, Net Saving for different age groups 
Output: Age Group, Avg Income, Avg Obligations, Avg Savings, Avg EMI
*/

SELECT D.CUSTOMER_PROFILE,
       ROUND(AVG(D.INCOME)) AVG_INCOME,
       ROUND(AVG(D.OBLIGATIONS)) AVG_OBLIGATIONS,
       ROUND(AVG(D.REPAY_AMOUNT)) AVG_EMI
FROM
  (SELECT CC.*,
          R.REPAY_AMOUNT
   FROM
     (SELECT C.CUSTOMER_NO,
             CASE
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) < 20 THEN '20 Under'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) BETWEEN 21 AND 30 THEN '21-30'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) BETWEEN 31 AND 40 THEN '31-40'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) BETWEEN 41 AND 50 THEN '41-50'
                 WHEN ROUND((SYSDATE - C.DATE_OF_BIRTH)/365) > 50 THEN '50 Above'
             END CUSTOMER_PROFILE,
             C.INCOME,
             C.OBLIGATIONS
      FROM CUSTOMER C) CC,
        ACCOUNT A,
        REPAYMENT_SCHEDULE R
   WHERE CC.CUSTOMER_NO = A.CUSTOMER_NO
     AND A.ACCOUNT_NO = R.ACCOUNT_NO
     AND R.REPAY_NO = 1) D
GROUP BY D.CUSTOMER_PROFILE
ORDER BY D.CUSTOMER_PROFILE;

---------------------------------------------------------------------------------------------------------

/*
10. State wise summary
*/

SELECT D.STATE,
       D.NO_BRANCHES,
       D.TOTAL_NO_OF_LOANS,
       D.ACTIVE_LOANS,
       D.CLOSED_LOANS,
       D.AVG_LOAN,
       D.AVG_TENURE,
       D.AVG_CUSTOMER_AGE,
       --POPULAR PRODUCT
       DECODE(GREATEST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS),
              D.EDUCATION_LOANS, 'EDUCATION LOAN',
              D.VEHICLE_LOANS, 'CAR LOAN',
              D.PERSONAL_LOANS, 'PERSONAL LOAN',
              D.HOME_LOANS, 'HOME LOAN',
              D.COMMERCIAL_LOANS, 'COMMERCIAL LOAN') MOST_POPULAR_PRODUCT,
       ROUND(GREATEST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS) / D.TOTAL_NO_OF_LOANS * 100, 2) POPULAR_SHARE,
       --LEAST POPULAR PRODUCT
       DECODE(LEAST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS),
              D.EDUCATION_LOANS, 'EDUCATION LOAN',
              D.VEHICLE_LOANS, 'CAR LOAN',
              D.PERSONAL_LOANS, 'PERSONAL LOAN',
              D.HOME_LOANS, 'HOME LOAN',
              D.COMMERCIAL_LOANS, 'COMMERCIAL LOAN') LEAST_POPULAR_PRODUCT,
       ROUND(LEAST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS) / D.TOTAL_NO_OF_LOANS * 100, 2) LEAST_SHARE
FROM
  (SELECT B.STATE,
          COUNT(DISTINCT B.BRANCH_NO) NO_BRANCHES,
          COUNT(1) TOTAL_NO_OF_LOANS,
          SUM(DECODE(A.STATUS,
                      'Disbursed', 1,
                      'Approved', 1, 0)) ACTIVE_LOANS,
          SUM(DECODE(A.STATUS,
                      'Cancelled', 1,
                      'Terminated', 1, 0)) CLOSED_LOANS,
          ROUND(AVG(A.LOAN_AMOUNT),2) AVG_LOAN,
          ROUND(AVG(A.REPAYMENT_TENURE),2) AVG_TENURE,
          ROUND(AVG(SYSDATE - C.DATE_OF_BIRTH)/365) AVG_CUSTOMER_AGE,
          SUM(DECODE(P.PRODUCT_NO, 100, 1, 0)) VEHICLE_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 200, 1, 0)) EDUCATION_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 300, 1, 0)) HOME_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 400, 1, 0)) PERSONAL_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 500, 1, 0)) COMMERCIAL_LOANS
   FROM ACCOUNT A,
        BRANCH B,
        CUSTOMER C,
        PRODUCT P
   WHERE A.BRANCH_NO = B.BRANCH_NO
     AND A.CUSTOMER_NO = C.CUSTOMER_NO
     AND A.PRODUCT_NO = P.PRODUCT_NO
     AND A.SUB_PRODUCT_NO = P.SUB_PRODUCT_NO
   GROUP BY B.STATE) D;

---------------------------------------------------------------------------------------------------------

/*
11. City wise summary
*/

SELECT D.CITY,
       D.STATE,
       D.NO_BRANCHES,
       D.TOTAL_NO_OF_LOANS,
       D.ACTIVE_LOANS,
       D.CLOSED_LOANS,
       D.AVG_LOAN,
       D.AVG_TENURE,
       D.AVG_CUSTOMER_AGE,
       --POPULAR PRODUCT
       DECODE(GREATEST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS),
              D.EDUCATION_LOANS, 'EDUCATION LOAN',
              D.VEHICLE_LOANS, 'CAR LOAN',
              D.PERSONAL_LOANS, 'PERSONAL LOAN',
              D.HOME_LOANS, 'HOME LOAN',
              D.COMMERCIAL_LOANS, 'COMMERCIAL LOAN') MOST_POPULAR_PRODUCT,
       ROUND(GREATEST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS) / D.TOTAL_NO_OF_LOANS * 100, 2) POPULAR_SHARE,
       --LEAST POPULAR PRODUCT
       DECODE(LEAST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS),
              D.EDUCATION_LOANS, 'EDUCATION LOAN',
              D.VEHICLE_LOANS, 'CAR LOAN',
              D.PERSONAL_LOANS, 'PERSONAL LOAN',
              D.HOME_LOANS, 'HOME LOAN',
              D.COMMERCIAL_LOANS, 'COMMERCIAL LOAN') LEAST_POPULAR_PRODUCT,
       ROUND(LEAST(D.EDUCATION_LOANS, D.VEHICLE_LOANS, D.COMMERCIAL_LOANS, D.PERSONAL_LOANS, D.HOME_LOANS) / D.TOTAL_NO_OF_LOANS * 100, 2) LEAST_SHARE
FROM
  (SELECT B.CITY,
          B.STATE,
          COUNT(DISTINCT B.BRANCH_NO) NO_BRANCHES,
          COUNT(1) TOTAL_NO_OF_LOANS,
          SUM(DECODE(A.STATUS,
                      'Disbursed', 1,
                      'Approved', 1, 0)) ACTIVE_LOANS,
          SUM(DECODE(A.STATUS,
                      'Cancelled', 1,
                      'Terminated', 1, 0)) CLOSED_LOANS,
          ROUND(AVG(A.LOAN_AMOUNT),2) AVG_LOAN,
          ROUND(AVG(A.REPAYMENT_TENURE),2) AVG_TENURE,
          ROUND(AVG(SYSDATE - C.DATE_OF_BIRTH)/365) AVG_CUSTOMER_AGE,
          SUM(DECODE(P.PRODUCT_NO, 100, 1, 0)) VEHICLE_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 200, 1, 0)) EDUCATION_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 300, 1, 0)) HOME_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 400, 1, 0)) PERSONAL_LOANS,
          SUM(DECODE(P.PRODUCT_NO, 500, 1, 0)) COMMERCIAL_LOANS
   FROM ACCOUNT A,
        BRANCH B,
        CUSTOMER C,
        PRODUCT P
   WHERE A.BRANCH_NO = B.BRANCH_NO
     AND A.CUSTOMER_NO = C.CUSTOMER_NO
     AND A.PRODUCT_NO = P.PRODUCT_NO
     AND A.SUB_PRODUCT_NO = P.SUB_PRODUCT_NO
   GROUP BY B.CITY, B.STATE) D;